@startuml
title Figura 3. Diagrama de Actividad para la Generación de Código

|Usuario|
start
:Hace clic en "Generar Código";

|Componente App|
:Recibe la acción del usuario (evento de clic);
:Invoca al servicio `CodeGenerator.generateCodeAndDownload()`
entregándole el estado actual del
diagrama (los arrays `nodes` y `edges`);

|Servicio CodeGenerator|
:Prepara un nuevo contenedor ZIP virtual (instancia de JSZip);
:Analiza los nodos del diagrama para
identificar los "Nodos Lógicos" únicos
(basado en el atributo `node` de `NodeData`);
if (Se encontraron Nodos Lógicos definidos?) then (sí)
  partition "Para cada Nodo Lógico encontrado" {
    :Crea una carpeta con el nombre del Nodo Lógico en el ZIP;
    :Invoca a `icuasw_mmesp_project_template.generateMainFileContent()`
    para generar el archivo principal .cpp;
    :Añade el archivo a la carpeta del ZIP;
    :Invoca a `edroomdeployment_h_template.generateHeaderFileContent()`
    para generar el archivo de cabecera .h;
    :Añade el archivo a la carpeta del ZIP;
    :Invoca a `edroomdeployment_cpp_template.generateCppFileContent()`
    para generar el archivo de implementación .cpp;
    :Añade el archivo a la carpeta del ZIP;
  }
else (no, ningún componente tiene un nodo lógico asignado)
  :Crea una carpeta por defecto ("default_node");
  :Genera todos los archivos dentro de esa carpeta;
endif
:Finaliza la creación del archivo ZIP en memoria (blob);
:Utiliza `FileSaver.js` (`saveAs`) para pedir al
navegador que inicie la descarga del ZIP;

|Usuario|
:El navegador muestra una ventana para guardar el archivo;
:Guarda "edroom_projects_all.zip" en su sistema local;
stop
@enduml
