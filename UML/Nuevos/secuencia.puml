@startuml
title Figura 4. Diagrama de Secuencia para la Actualización de Mensajes de un Puerto

actor Usuario

participant "PortInfoPanel" as PIP
participant "Componente App (Controlador)" as App
participant "Estado de React" as State

autonumber

Usuario -> PIP : Edita mensajes de un puerto y pulsa "Guardar"
activate PIP

PIP -> App : onUpdatePortMessages(nodeId, portId, nuevosMensajes)
note right of PIP: El panel notifica al controlador. No modifica el estado directamente.
deactivate PIP
activate App

App -> App : Se ejecuta `handleUpdatePortMessages(...)`
App -> State : Busca en el estado `edges` si el puerto (nodeId, portId) está conectado
note right of App: ¿Este puerto tiene una conexión activa?

alt Hay una conexión
    App -> App : Identifica el `connectedNodeId` y `connectedPortId`
    App -> State : Invoca `setNodes( (prevNodes) => ... )`
    activate State
    note right of State
        La función de actualización realiza dos acciones:
        1. Actualiza los mensajes del puerto original.
        2. Actualiza los mensajes del puerto conectado
           para mantener la consistencia del protocolo.
    end note
    State --> App : Nuevo estado de `nodes` actualizado
    deactivate State
    App -> App : setNotification("Mensajes sincronizados...")
else Sin conexión
    App -> State : Invoca `setNodes( (prevNodes) => ... )`
    activate State
    note right of State
        Solo se actualizan los mensajes del puerto original.
    end note
    State --> App : Nuevo estado de `nodes` actualizado
    deactivate State
    App -> App : setNotification("Mensajes actualizados.")
end

App -> PIP : onClose()
deactivate App

@enduml
