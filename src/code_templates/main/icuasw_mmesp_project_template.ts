/**
 * icuasw_mmesp_project_template.ts
 * Plantilla para generar el archivo principal (.cpp) del proyecto EDROOM.
 * Genera las inclusiones, instancias y configuración de los componentes para el despliegue.
 */
import type { Node, NodeData } from '../../types';

/**
 * Clase que encapsula la generación del archivo principal del proyecto EDROOM.
 */
export class icuasw_mmesp_project_template {
    /**
     * Genera el contenido del archivo principal (.cpp) para el nodo lógico.
     * @param nodes - Nodos del diagrama.
     * @param localNodeName - Nombre del nodo local.
     * @returns Código fuente .cpp generado.
     */
    public static generateMainFileContent(nodes: Node<NodeData>[], localNodeName: string): string {

        // Generar inclusiones de cabeceras
        const includes = nodes.map(c => {
            const name = c.data.name.replace(/\s/g, '').toLowerCase();
            let prefix = '';

            // Lógica para el componente Top: si es remoto, 'r'. Si no, nada.
            if (c.data.isTop && c.data.node !== localNodeName) {
                prefix = 'r';
            } else if (!c.data.isTop && c.data.node === localNodeName) {
                // Componentes locales normales llevan 'cc'.
                prefix = 'cc';
            } else if (!c.data.isTop && c.data.node !== localNodeName) {
                // Componentes remotos normales llevan 'rcc'.
                prefix = 'rcc';
            }
            
            return `#include <public/${prefix}${name}_iface_v1.h>`;
        }).join('\n');

        // Generar las instancias de los componentes
        const initComponents = nodes.map(c => {
            const componentType = c.data.name;
            const id = c.data.componentId;
            const maxMessages = c.data.maxMessages;
            const priority = c.data.priority;
            const stackSize = c.data.stackSize;
            
            const isRemote = c.data.node !== localNodeName;
            const componentNameBase = c.data.name.toLowerCase().replace(/\s/g, '');

            let finalInstanceName = '';
            let componentClass = '';
            
            // Lógica para la instancia y la clase del componente
            if (c.data.isTop && isRemote) {
                finalInstanceName = `r${componentNameBase}`;
                componentClass = `R${componentType.replace(/\s/g, '')}`;
            } else if (c.data.isTop && !isRemote) {
                finalInstanceName = componentNameBase;
                componentClass = componentType.replace(/\s/g, '');
            } else if (!c.data.isTop && isRemote) {
                finalInstanceName = `rcc${componentNameBase}`;
                componentClass = `RCC${componentType.replace(/\s/g, '')}`;
            } else { // !c.data.isTop && !isRemote
                finalInstanceName = `cc${componentNameBase}`;
                componentClass = `CC${componentType.replace(/\s/g, '')}`;
            }
            
            const memoryName = `${isRemote ? 'r' : ''}${c.data.name.toLowerCase().replace(/\s/g, '')}`;

            return `\t${componentClass}  ${finalInstanceName}(${id}, ${maxMessages}, ${priority}, ${stackSize}, systemDeployment.Get${memoryName}Memory());`;
        }).join('\n');
        
        // Generar la lista de componentes para la configuración
        const configComponents = nodes.map(c => {
            let instanceName = c.data.name.toLowerCase().replace(/\s/g, '');
            if (c.data.node !== localNodeName) {
                instanceName = `r${instanceName}`;
            }
            return `&${instanceName}`;
        }).join(', ');

        return `//##############################################################################
//###############    This file has been generated by Connectus    ###############
//##############################################################################

#include <public/edroom_glue.h>


//******************************************************************************
// include deployment edroom components
${includes}

#ifdef CONFIG_EDROOMBP_DEPLOYMENT_NEED_TASK

    CEDROOMSystemDeployment systemDeployment;

#endif


rtems_task Init (uint32_t arg){

    //uint32_t aux;

#ifndef CONFIG_EDROOMBP_DEPLOYMENT_NEED_TASK

    CEDROOMSystemDeployment systemDeployment;

#endif

    //aux=sizeof(systemDeployment) + sizeof(ICUASW)+   sizeof(CCEPDManager);
    //aux+= sizeof(CCTM_ChannelCtrl) +sizeof(RCCHK_FDIRMng) +sizeof(RCCBKGTCExec);

${initComponents}

    //if(aux< 32*1024){
    systemDeployment.Config(${configComponents});

    systemDeployment.Start();
    //}
    //;

}`;
    }
}