// src/code_templates/main/icuasw_mmesp_project_template.ts

import type { Node, NodeData } from '../../types';

export class icuasw_mmesp_project_template {
    public static generateMainFileContent(nodes: Node<NodeData>[], localNodeName: string): string {
        
        // Generar inclusiones de cabeceras
        const includes = nodes.map(c => {
            const name = c.data.name.replace(/\s/g, '');
            return `#include <public/${name.toLowerCase()}_iface_v1.h>`;
        }).join('\n');

        // Generar las instancias de los componentes
        const initComponents = nodes.map(c => {
            const componentType = c.data.name;
            const instanceName = c.data.name.toLowerCase().replace(/\s/g, '');
            const id = c.data.componentId;
            const maxMessages = c.data.maxMessages;
            const priority = c.data.priority;
            const stackSize = c.data.stackSize;
            const memoryName = instanceName.replace(/\s/g, '');

            let componentClass = '';
            if (componentType === 'ICUASW') {
                componentClass = 'ICUASW';
            } else if (c.data.node === localNodeName) {
                componentClass = `CC${componentType.replace(/\s/g, '')}`;
            } else {
                componentClass = `RCC${componentType.replace(/\s/g, '')}`;
            }

            return `\t${componentClass}  ${instanceName}(${id}, ${maxMessages}, ${priority}, ${stackSize}, systemDeployment.Get${memoryName}Memory());`;
        }).join('\n');
        
        // Generar la lista de componentes para la configuraciÃ³n
        const configComponents = nodes.map(c => `&${c.data.name.toLowerCase().replace(/\s/g, '')}`).join(', ');

        return `//##############################################################################
//###############     This file has been generated by EDROOM     ###############
//##############################################################################

#include <public/edroom_glue.h>


//******************************************************************************
// include deployment edroom components
${includes}

#ifdef CONFIG_EDROOMBP_DEPLOYMENT_NEED_TASK

    CEDROOMSystemDeployment systemDeployment;

#endif


rtems_task Init (uint32_t arg){

    //uint32_t aux;

#ifndef CONFIG_EDROOMBP_DEPLOYMENT_NEED_TASK

    CEDROOMSystemDeployment systemDeployment;

#endif

    //aux=sizeof(systemDeployment) + sizeof(ICUASW)+  sizeof(CCEPDManager);
    //aux+= sizeof(CCTM_ChannelCtrl) +sizeof(RCCHK_FDIRMng) +sizeof(RCCBKGTCExec);

${initComponents}

    //if(aux< 32*1024){
    systemDeployment.Config(${configComponents});

    systemDeployment.Start();
    //}
    //;

}`;
    }
}